// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWz4/cNBT+VyLDcbL5MXNYcqNUhV7aUXc5VXvwZN7MuCS2a7+siFYjdacIuIG4ceRS",
	"VXBA3ODvCZT+Gch2dpLsZH502VYqrOawsf38nr/v8/d8QVKRS8GBoybJBdHpAnJq/30EGj9RQBHGtMyB",
	"oxmUSkhQyMAuSQuNIgd1f2q+4EuaywxIEsXDAZkJlVMkCWEchzEZECwluE+YgyLLARFqCuouRehEkziM",
	"oyA0Py8KkyhKola4RsX4fB39QHRjoyiK/DiOY384HA790Wg06ouV7kSndrwdH0Z9yxU8LUCjO+YUdKqY",
	"RCY4Schf37z4+/uvX7+4fPXbqlr98Ofvz1599V11+cvrn15Wlz9Wz3+uVr9Wq5fV6o/q+bf3p9WzFRm0",
	"8j0Mr/56E6NAmo0VS7tlRh8dhwcgXFfOFExJ8rh1ijb0gzaLnYxdmBrAz9aZxOQJpGgKNWLZKhOapiDx",
	"hlS9txqzsSdIsdCHaKzG+obJFKTAJPYf1A/Nz4uHiTlrvFfh706evTr6XE53mc7/U03b5HEL7narJtPU",
	"2Zz3JnazaTImE+MzCwAytAfitEA2ycCnUvq59usd/AlNvwBuEpyD0s6po6PwKPRPHnw8Pvns4anlQwKn",
	"kpGEDI/Co9hWgAsrskA28psDbvr+I8BCce1drbO7KWpmjbbIPWbTS6poDghKk+Tx9T06SDAz8rQAVZIB",
	"4TSH6wtcazaVHMDJ9VSWAM/cK2+mRL4l35qme25Nk/KaaHYmQLFv+1Oxc/MzIyktBdfuxsdhaF8bgmNN",
	"CZUyY6lFO3iiTQEXrf0YQm4DP1QwIwn5IGgeOUH9wgnaHatxIqoULZ3WuufTRZqC1rMi89ZEm7hRONoU",
	"BxfozUTBp/Z66CLPqSprUVwpRhve6Nzoot09T0Cdm9twZu6x0D3Kc28yb7xFeG6arC39jpiWb4TePtC6",
	"b8Jl1wBQFbD8l/QdzNpbYmkD4H00FT0suSa2lSU3/RZZ6jbR/yBLGwDvZGk5WFt6cLHuUUuXLgPX0LuJ",
	"79pxj261eLdgn8m3GyJzA7hoPLE93SXozRyyB7lbgblGoS7Tm5Reu+I9N2Nn56SeZnyegWfbwga6nwLe",
	"KcetXDtRHr8blN+vK2LbjWvMk9IbH8qb3QTU+RXShcpIQhaIMgmCTKQ0WwiNyXF4HAZkebb8JwAA//9C",
	"vLSpRBAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
