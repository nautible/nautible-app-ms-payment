// Package creditserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package creditserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTY/cNBj+K5HhOLP5GqQlN7pVaS/dVXd7QnvwJu/MuCS2a79ZMaxG6k4RcANx48il",
	"quCAuMHvCZT+DGQ7M0nmu8sWVBjNIXH8fj3P49fvFUlFIQUHjpokV0SnYyiofXwEGo8UUIQTOimAo1mU",
	"SkhQyMBuSUuNogD1IDNv8BktZA4kCaO4R4ZCFRRJQhjHOCI9ghMJ7hVGoMi0R4TKQN2lCB1rEgVR6Afm",
	"74VBEoZJ2DLXqBgfLawfiq5tGIZhP4qiqB/HcdwfDAaDdbbSVXRm19v2Qbhuu4KnJWh0ZWagU8UkMsFJ",
	"Qv746sWf3375+sX1q19m1ey733999uqLb6rrn17/8LK6/r56/mM1+7mavaxmv1XPv36QVc9mpNeKdxzM",
	"f2sDo0CanyiWdtMMPzwM9kC4zpwpyEjySauKNvS9NoudiF2YGsDPF5HExRNI0SRqxLJRJjRNQeINqXpn",
	"NWZtT5FiqffRWI31DYMpSIFJXF9oPzB/L4oTU2u0U+H/nDzX6uixzLY1nf+nmjbJ4xa62602mSbPpt6b",
	"tJvVJmMiMT60ACBDWxCnJbKLHPpUyn6h+7WHfqogY0h65BKUdo06PAgOgv7pw49OTu8fn1k6JHAqGUlI",
	"fBAcRDYBHFuN+WPIcfy5eRwBrnb9R4Cl4tqjnrYH3EtFZlukBEXNHqMvct85MQBpKbh2+v0giFcdnoK6",
	"ZCl4jzm9pCynFzlYaHVZFFRNSEKObEnefKP17R2NIf3UwEhH2qBvV+1ivY+cGy++bA7T1nrm+5Yrucd4",
	"ZvFRtAAEZYIt++jwyszK0xLUhPQIpwUsb3CDhslkD4Uth7Jy8kyX8IZKFBviLUR3z+1pQi4dga0BUOxy",
	"fya2Oj9f4j8KAjs7CY41JVTKnKUWbf+JNglctfwxhMIavq9gSBLynt+MbH49r/nt+7fpq1QpOnEnp1uf",
	"LtMUtB6Wubcg2tgNgsGqOLhAbyhKni0p0ohirhjdEmErl0aFPSKFXqM8N2F6JxuE5z6TxQV1R2STN0Jv",
	"F2jdCXfabWeoSpj+Tfr2Zu0tsbQC8C6ayjUsuSt5I0vu81tkqTsS/AdZWgF4K0utlu5f1bfs1AXLwQ0n",
	"3bB37bpHNzZ4t2FXi28udNsQzXW51A/txy41b9Yb12B2KwDXCNT1excTr8l3x4nYNQEwPsrBuVvB9WPA",
	"O5PjRaR/G91361DYC8ZdxfvzZV2AupxjXKqcJGSMKBPfz0VK87HQmBwGh4FPpufTvwIAAP//31tNBQIR",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
