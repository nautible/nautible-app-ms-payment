// Package creditserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package creditserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUy27bOBT9FYEzS8l6eYCMdokDJLPJBEmzKrKgqWubqUSy5JVRN9C/FyRlR7IVJ2hT",
	"FH0ABiyRuq9z7jmPhMlaSQECDSkeiWErqKl7vAGDMw0UYaah5HhNNzUItFdKSwUaObgPWWNQ1qD/K+0b",
	"fKK1qoAUaZaHZCF1TZEUhAvMMxIS3Cjwr7AETdqQSF2CPqcIg2iSJVkaJ/YXpEmRpkXaCzeouVjuoq/k",
	"MDZN0zTKsiyL8jzPo+l0Oh2LRYm0utacDUun/54kr+i8DYmGjw3XUJLi/a6R/kBhH5tBvftdPjl/AIa2",
	"nQ7wY1BTxkDhOFhRYn9BlhcWr1GwfPhXovX70jzK1J0qX5bGMb5eMfUfvr5ZljsIDxVnP+Vi4ZpEjq5F",
	"QRvk8woiqlRUm0h5ZiPmeCYhWYM2XAo7zSSZJNHt1en17eX/79zQCgRVnBQknyQT25yiuHKLEHcJ7IZI",
	"4/5LMExzhT6bd9pgtq1jt4jaO0tfd0v8aGDwTJYbZ71SYLd4VKmKMxcSPxibc+vm9ulvDQtSkL/iJ7uP",
	"O6+PnzP6dogl6gbcgVFSGL/fWZK8dRv7DQxhMg1jYMyiqYIdQhb6aTI9xFRIDBayEaXbCtPUNdWbEayR",
	"Lo3dlacObkGvnU23IVHNCF1e/c/R5W+/I11j5vPL0rWP9TG62nArtfhxK/3Wl6rAe9mw6Lk7D2jAxqn0",
	"907KmtaAoG3t/Sw7l7GOQgqnexISQWsY3g75CXtY79lge3/A3Qhkb4JvB4EHIJhvgl6/x6WxhBFp3AA2",
	"WpiABoaLZQXPIXsBeLY5fSr14wH+GcVxAThkTsHLzFmVrIBWuPpsK71EI1JsTMBkCQckXnZZ9rD8J8kP",
	"M3b1gztB15RXdF7BoTHbQbYf+uTBbAXsQ28if+xOeyPZRKDX2/VpdEUKskJURRxXktFqJQ0WJ8lJEpP2",
	"vv0SAAD//7DzQQP5DAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
