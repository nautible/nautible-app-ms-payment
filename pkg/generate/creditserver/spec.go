// Package creditserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package creditserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWz2/cRBT+V6yB4zr+sXsIvlGqQi9N1IRTlcPE+3YzxZ6ZzjxHWNFKzRYBNxA3jlyq",
	"Cg6IG/w9htI/A82Md23ven80pKBAtIfYnjfvve/75ntzRVKRS8GBoybJFdHpBeTU/vsYNH6kgCIc0zIH",
	"jualVEKCQgZ2SVpoFDmoh2PzBJ/TXGZAkigeDshEqJwiSQjjOIzJgGApwT3CFBSZDYhQY1D3KUInmsRh",
	"HAWh+XlRmERRErXCNSrGp8voR6IbG0VR5MdxHPvD4XDoj0ajUV+sdB2d2vft+DDqW67gWQEaXZtj0Kli",
	"EpngJCF/fPXyz2+/fPPy+vUv82r+3e+/Pn/9xTfV9U9vfnhVXX9fvfixmv9czV9V89+qF18/HFfP52TQ",
	"yncULv56E6NAmh0rlnbLjD44DPdAuK6cKRiT5Emrizb0gzaLnYxdmBrAz5aZxPlTSNEUasSyUSY0TUHi",
	"Dam6sxqzsSdIsdD7aKzG+obJFKTAJPY36ofm58XDxPQa71T4PyfPXh19KsfbTOf/qaZN8rgFd7tVk2nq",
	"bPq9id2sm4zJxPjEAoAMbUOcFsjOM/CplH6u/XoH/5ymnwE3CS5BaefU0UF4EPonjz48Pvnk6NTyIYFT",
	"yUhChgfhQWwrwAsrskA28psCrvv+Y8BCce0t1tndFDVfjbbIA2bTS6poDghKk+TJ6h4dJJh586wAVZIB",
	"4TSH1QVuNJtK9uBkNZUlwDPnypsokW/It6TpgVvTpFwRzdYEKHZtfyq2bn5mJKWl4Nqd+DgM7W1DcKwp",
	"oVJmLLVoB0+1KeCqtR9DyG3g+womJCHvBc0lJ6hvOEF7YjVORJWipdNatz9dpCloPSkyb0m0iRuFo3Vx",
	"cIHeRBR8bI+HLvKcqrIWxUIx2vBGp0YX7el5AurSnIYzc46F7lGeu5N5xxuE5z6TpaXfE+PyrdDbBVr3",
	"TjjrGgCqAmZ/k769WXtHLK0BvIumooclN8Q2suQ+v0OWukP0P8jSGsBbWZoNlpYeXNVzaeaSZeDGeTft",
	"ffveoxsN3i3YZfHNCLSGaObLih/aj11q3s4bezC7FYBrBOr+vfPSa+rdcSK2TkzqacanGbjt1nD9GPBe",
	"ebTM9G+je7cOhR0wbhTvz5fdAtTlAuNCZSQhF4gyCYJMpDS7EBqTw/AwDMjsbPZXAAAA///M5cp0NBAA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
